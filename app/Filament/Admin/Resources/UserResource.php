<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\UserResource\Widgets\UserOverview;
use App\Filament\Resources\UserResource\Pages;
use App\Models\User;
use AymanAlhattami\FilamentPageWithSidebar\FilamentPageSidebar;
use AymanAlhattami\FilamentPageWithSidebar\PageNavigationItem;
use Carbon\Carbon;
use Filament\Forms;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;

class UserResource extends Resource
{
    protected static ?string $model = User::class;

    protected static ?string $navigationIcon = 'heroicon-o-users';

    protected static ?string $navigationGroup = '👥 Usuários';

    protected static ?string $navigationLabel = 'Gerenciar Usuários';

    protected static ?string $modelLabel = 'Usuário';

    protected static ?string $pluralModelLabel = 'Usuários';

    protected static ?string $recordTitleAttribute = 'name';

    /**
     * @dev @venixplataformas
     * @return bool
     */
    public static function canAccess(): bool
    {
        return auth()->check() && auth()->user()->hasRole('admin');
    }

    /**
     * @param Model $record
     * @return string
     */
    public static function getGlobalSearchResultTitle(Model $record): string
    {
        return $record->name; // TODO: Change the autogenerated stub
    }

    /**
     * @return string[]
     */
    public static function getGloballySearchableAttributes(): array
    {
        return ['name', 'email']; // TODO: Change the autogenerated stub
    }

    /**
     * @param Model $record
     * @return FilamentPageSidebar
     */
    public static function sidebar(Model $record): FilamentPageSidebar
    {
        return FilamentPageSidebar::make()
            ->setTitle('👤 ' . $record->name)
            ->setDescription('🕐 Membro desde ' . (
                $record->created_at instanceof \Carbon\Carbon 
                    ? $record->created_at->format('d/m/Y')
                    : \Carbon\Carbon::parse($record->created_at)->format('d/m/Y')
            ))
            ->setNavigationItems([
                PageNavigationItem::make('📋 Lista de Usuários')
                    ->translateLabel()
                    ->url(static::getUrl('index'))
                    ->icon('heroicon-o-user-group')
                    ->isActiveWhen(function () {
                        return request()->routeIs(static::getRouteBaseName() . '.index');
                    }),
                    
                PageNavigationItem::make('👁️ Visualizar Perfil')
                    ->translateLabel()
                    ->url(static::getUrl('view', ['record' => $record->id]))
                    ->icon('heroicon-o-eye')
                    ->isActiveWhen(function () {
                        return request()->routeIs(static::getRouteBaseName() . '.view');
                    }),
                    
                PageNavigationItem::make('📊 Detalhes & Analytics')
                    ->translateLabel()
                    ->url(static::getUrl('detail', ['record' => $record->id]))
                    ->icon('heroicon-o-chart-bar-square')
                    ->isActiveWhen(function () {
                        return request()->routeIs(static::getRouteBaseName() . '.detail');
                    }),
                    
                PageNavigationItem::make('✏️ Editar Usuário')
                    ->translateLabel()
                    ->url(static::getUrl('edit', ['record' => $record->id]))
                    ->icon('heroicon-o-pencil-square')
                    ->isActiveWhen(function () {
                        return request()->routeIs(static::getRouteBaseName() . '.edit');
                    }),
                    
                PageNavigationItem::make('🔐 Alterar Senha')
                    ->translateLabel()
                    ->url(static::getUrl('password.change', ['record' => $record->id]))
                    ->icon('heroicon-o-key')
                    ->isActiveWhen(function () {
                        return request()->routeIs(static::getRouteBaseName() . '.password.change');
                    }),
            ]);
    }


    /**
     * @param Form $form
     * @return Form
     */
    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Wizard::make([
                    Forms\Components\Wizard\Step::make('👤 Dados Pessoais')
                        ->description('Informações básicas do usuário')
                        ->icon('heroicon-o-user')
                        ->schema([
                            Forms\Components\Section::make('📋 Informações Pessoais')
                                ->description('Dados básicos de identificação')
                                ->schema([
                                    Forms\Components\Grid::make(2)
                                        ->schema([
                                            Forms\Components\TextInput::make('name')
                                                ->label('👤 Nome Completo')
                                                ->placeholder('Digite o nome completo')
                                                ->required()
                                                ->maxLength(191)
                                                ->prefixIcon('heroicon-m-user'),
                                                
                                            Forms\Components\TextInput::make('email')
                                                ->label('📧 E-mail')
                                                ->placeholder('usuario@exemplo.com')
                                                ->email()
                                                ->required()
                                                ->maxLength(191)
                                                ->prefixIcon('heroicon-m-envelope'),
                                        ]),
                                        
                                    Forms\Components\Grid::make(2)
                                        ->schema([
                                            Forms\Components\TextInput::make('cpf')
                                                ->label('🆔 CPF')
                                                ->placeholder('000.000.000-00')
                                                ->mask('999.999.999-99')
                                                ->maxLength(191)
                                                ->prefixIcon('heroicon-m-user'),
                                                
                                            Forms\Components\TextInput::make('phone')
                                                ->label('📱 Telefone')
                                                ->placeholder('(11) 99999-9999')
                                                ->mask('(99) 99999-9999')
                                                ->maxLength(191)
                                                ->prefixIcon('heroicon-m-phone'),
                                        ]),
                                        
                                    Forms\Components\Grid::make(2)
                                        ->schema([
                                            Forms\Components\Select::make('inviter')
                                                ->label('🤝 Afiliado Indicador')
                                                ->placeholder('Selecione um afiliado')
                                                ->relationship(name: 'affiliate', titleAttribute: 'name')
                                                ->options(
                                                    fn($get) => User::query()->pluck('name', 'id')
                                                )
                                                ->searchable()
                                                ->preload()
                                                ->live()
                                                ->prefixIcon('heroicon-m-user-group'),
                                                
                                            Forms\Components\DateTimePicker::make('email_verified_at')
                                                ->label('✅ Verificação de E-mail')
                                                ->prefixIcon('heroicon-m-check-badge'),
                                        ]),
                                ])
                        ]),

                    Forms\Components\Wizard\Step::make('💰 Sistema de Afiliados')
                        ->description('Configurações de comissões e revenue')
                        ->icon('heroicon-o-currency-dollar')
                        ->schema([
                            Forms\Components\Section::make('💸 Configurações Financeiras')
                                ->description('Definições de comissões e revenue share')
                                ->schema([
                                    Forms\Components\Grid::make(2)
                                        ->schema([
                                            Forms\Components\TextInput::make('affiliate_revenue_share')
                                                ->label('📈 Revenue Share (%)')
                                                ->placeholder('Ex: 15.5')
                                                ->required()
                                                ->numeric()
                                                ->suffix('%')
                                                ->prefixIcon('heroicon-m-chart-bar')
                                                ->helperText('Porcentagem real de comissão'),
                                                
                                            Forms\Components\TextInput::make('affiliate_revenue_share_fake')
                                                ->label('📊 Revenue Share Exibido (%)')
                                                ->placeholder('Ex: 20.0')
                                                ->required()
                                                ->numeric()
                                                ->suffix('%')
                                                ->prefixIcon('heroicon-m-chart-pie')
                                                ->helperText('Porcentagem mostrada para o afiliado'),
                                        ]),
                                        
                                    Forms\Components\Grid::make(2)
                                        ->schema([
                                            Forms\Components\TextInput::make('affiliate_cpa')
                                                ->label('💵 CPA (Custo por Aquisição)')
                                                ->placeholder('Ex: 50.00')
                                                ->required()
                                                ->numeric()
                                                ->prefix('R$')
                                                ->prefixIcon('heroicon-m-banknotes')
                                                ->helperText('Valor pago por novo usuário'),
                                                
                                            Forms\Components\TextInput::make('affiliate_baseline')
                                                ->label('📊 Baseline')
                                                ->placeholder('Ex: 100.00')
                                                ->required()
                                                ->numeric()
                                                ->prefix('R$')
                                                ->prefixIcon('heroicon-m-calculator')
                                                ->helperText('Valor mínimo base'),
                                        ]),
                                ])
                        ]),

                    Forms\Components\Wizard\Step::make('⚙️ Configurações')
                        ->description('Status e permissões do usuário')
                        ->icon('heroicon-o-cog-6-tooth')
                        ->schema([
                            Forms\Components\Section::make('🔐 Controles de Acesso')
                                ->description('Configure o status e permissões')
                                ->schema([
                                    Forms\Components\Grid::make(1)
                                        ->schema([
                                            Forms\Components\Toggle::make('status')
                                                ->label('✅ Usuário Ativo')
                                                ->helperText('Usuário pode acessar a plataforma')
                                                ->onIcon('heroicon-m-check-circle')
                                                ->offIcon('heroicon-m-x-circle')
                                                ->onColor('success')
                                                ->offColor('danger')
                                                ->inline(false),
                                                
                                            Forms\Components\Toggle::make('banned')
                                                ->label('🚫 Usuário Banido')
                                                ->helperText('Usuário está permanentemente banido')
                                                ->onIcon('heroicon-m-no-symbol')
                                                ->offIcon('heroicon-m-check-circle')
                                                ->onColor('danger')
                                                ->offColor('success')
                                                ->inline(false),
                                                
                                            Forms\Components\Toggle::make('is_demo_agent')
                                                ->label('🌟 Influenciador/Demo Agent')
                                                ->helperText('Usuário tem privilégios especiais')
                                                ->onIcon('heroicon-m-star')
                                                ->offIcon('heroicon-m-user')
                                                ->onColor('warning')
                                                ->offColor('gray')
                                                ->inline(false),
                                        ]),
                                ])
                        ]),
                ])
                ->skippable()
                ->persistStepInQueryString()
                ->columnSpanFull()
            ]);
    }

    /**
     * @param Table $table
     * @return Table
     */
    public static function table(Table $table): Table
    {
        return $table
            ->defaultSort('created_at', 'desc')
            ->striped()
            ->columns([
                Tables\Columns\ImageColumn::make('avatar')
                    ->label('👤')
                    ->circular()
                    ->size(40)
                    ->defaultImageUrl('/assets/images/default-avatar.png')
                    ->extraImgAttributes(['loading' => 'lazy']),
                    
                Tables\Columns\TextColumn::make('name')
                    ->label('👤 Usuário')
                    ->searchable()
                    ->sortable()
                    ->weight('medium')
                    ->color('primary')
                    ->description(fn (User $record): ?string => $record->email),
                    
                Tables\Columns\TextColumn::make('wallet.total_balance')
                    ->label('💰 Saldo')
                    ->money('BRL')
                    ->icon('heroicon-m-banknotes')
                    ->color(fn ($state): string => ($state ?? 0) > 0 ? 'success' : 'gray')
                    ->formatStateUsing(fn ($state): string => 'R$ ' . number_format($state ?? 0, 2, ',', '.'))
                    ->placeholder('R$ 0,00'),
                    
                Tables\Columns\BadgeColumn::make('vipLevel')
                    ->label('💎 VIP')
                    ->getStateUsing(function (User $record): string {
                        return $record->vipLevel ?? 'Bronze';
                    })
                    ->color(fn (string $state): string => match (strtolower($state)) {
                        'bronze' => 'gray',
                        'prata', 'silver' => 'info',
                        'ouro', 'gold' => 'warning',
                        'diamante', 'diamond' => 'primary',
                        'esmeralda', 'emerald' => 'success',
                        default => 'gray',
                    })
                    ->icon(fn (string $state): string => match (strtolower($state)) {
                        'bronze' => 'heroicon-m-trophy',
                        'prata', 'silver' => 'heroicon-m-star',
                        'ouro', 'gold' => 'heroicon-m-fire',
                        'diamante', 'diamond' => 'heroicon-m-sparkles',
                        'esmeralda', 'emerald' => 'heroicon-m-gem',
                        default => 'heroicon-m-user',
                    }),
                    
                Tables\Columns\TextColumn::make('wallet.vip_points')
                    ->label('⭐ Pontos VIP')
                    ->numeric()
                    ->icon('heroicon-m-star')
                    ->color('warning')
                    ->formatStateUsing(fn ($state): string => number_format($state ?? 0)),
                    
                Tables\Columns\TextColumn::make('affiliate.name')
                    ->label('🤝 Afiliado')
                    ->placeholder('Sem afiliado')
                    ->searchable()
                    ->toggleable(isToggledHiddenByDefault: true),
                    
                Tables\Columns\IconColumn::make('status')
                    ->label('✅ Ativo')
                    ->boolean()
                    ->trueIcon('heroicon-o-check-circle')
                    ->falseIcon('heroicon-o-x-circle')
                    ->trueColor('success')
                    ->falseColor('danger'),
                    
                Tables\Columns\IconColumn::make('banned')
                    ->label('🚫 Banido')
                    ->boolean()
                    ->trueIcon('heroicon-o-no-symbol')
                    ->falseIcon('heroicon-o-check-circle')
                    ->trueColor('danger')
                    ->falseColor('success'),
                    
                Tables\Columns\IconColumn::make('is_demo_agent')
                    ->label('🌟 Influencer')
                    ->boolean()
                    ->trueIcon('heroicon-o-star')
                    ->falseIcon('heroicon-o-user')
                    ->trueColor('warning')
                    ->falseColor('gray')
                    ->toggleable(isToggledHiddenByDefault: true),
                    
                Tables\Columns\IconColumn::make('email_verified_at')
                    ->label('📧 Verificado')
                    ->boolean()
                    ->getStateUsing(fn (User $record): bool => !is_null($record->email_verified_at))
                    ->trueIcon('heroicon-o-check-badge')
                    ->falseIcon('heroicon-o-clock')
                    ->trueColor('success')
                    ->falseColor('warning')
                    ->toggleable(isToggledHiddenByDefault: true),
                    
                Tables\Columns\TextColumn::make('created_at')
                    ->label('📅 Cadastro')
                    ->dateTime('d/m/Y H:i')
                    ->sortable()
                    ->color('gray')
                    ->since()
                    ->tooltip(fn (User $record): string => 
                        $record->created_at instanceof \Carbon\Carbon 
                            ? $record->created_at->format('d/m/Y H:i:s')
                            : \Carbon\Carbon::parse($record->created_at)->format('d/m/Y H:i:s')
                    ),
                    
                Tables\Columns\TextColumn::make('updated_at')
                    ->label('🔄 Atualização')
                    ->dateTime('d/m/Y H:i')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->color('gray'),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('status')
                    ->label('Status do Usuário')
                    ->options([
                        '1' => '✅ Ativo',
                        '0' => '❌ Inativo',
                    ])
                    ->indicator('Status'),
                    
                Tables\Filters\TernaryFilter::make('banned')
                    ->label('Usuários Banidos')
                    ->boolean()
                    ->trueLabel('🚫 Banidos')
                    ->falseLabel('✅ Não Banidos')
                    ->placeholder('🔍 Todos'),
                    
                Tables\Filters\TernaryFilter::make('is_demo_agent')
                    ->label('Influenciadores')
                    ->boolean()
                    ->trueLabel('🌟 Influencers')
                    ->falseLabel('👤 Usuários Comuns')
                    ->placeholder('🔍 Todos'),
                    
                Tables\Filters\TernaryFilter::make('email_verified_at')
                    ->label('E-mail Verificado')
                    ->boolean()
                    ->trueLabel('✅ Verificado')
                    ->falseLabel('⏳ Pendente')
                    ->placeholder('🔍 Todos')
                    ->queries(
                        true: fn (Builder $query) => $query->whereNotNull('email_verified_at'),
                        false: fn (Builder $query) => $query->whereNull('email_verified_at'),
                    ),
                    
                Filter::make('created_at')
                    ->form([
                        DatePicker::make('created_from')
                            ->label('📅 Cadastrado a partir de'),
                        DatePicker::make('created_until')
                            ->label('📅 Cadastrado até'),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['created_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                            );
                    })
                    ->indicateUsing(function (array $data): array {
                        $indicators = [];
                        if ($data['created_from'] ?? null) {
                            $indicators['created_from'] = '📅 Desde ' . Carbon::parse($data['created_from'])->format('d/m/Y');
                        }
                        if ($data['created_until'] ?? null) {
                            $indicators['created_until'] = '📅 Até ' . Carbon::parse($data['created_until'])->format('d/m/Y');
                        }
                        return $indicators;
                    }),
                    
                Tables\Filters\Filter::make('balance_range')
                    ->form([
                        Forms\Components\Grid::make(2)
                            ->schema([
                                Forms\Components\TextInput::make('balance_from')
                                    ->label('💰 Saldo mínimo')
                                    ->numeric()
                                    ->prefix('R$')
                                    ->placeholder('Ex: 100.00'),
                                Forms\Components\TextInput::make('balance_until')
                                    ->label('💰 Saldo máximo')
                                    ->numeric()
                                    ->prefix('R$')
                                    ->placeholder('Ex: 10000.00'),
                            ])
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['balance_from'],
                                fn (Builder $query, $value): Builder => 
                                    $query->whereHas('wallet', fn ($q) => $q->where('total_balance', '>=', $value))
                            )
                            ->when(
                                $data['balance_until'],
                                fn (Builder $query, $value): Builder => 
                                    $query->whereHas('wallet', fn ($q) => $q->where('total_balance', '<=', $value))
                            );
                    })
                    ->indicateUsing(function (array $data): array {
                        $indicators = [];
                        if ($data['balance_from'] ?? null) {
                            $indicators['balance_from'] = '💰 Saldo ≥ R$ ' . number_format($data['balance_from'], 2, ',', '.');
                        }
                        if ($data['balance_until'] ?? null) {
                            $indicators['balance_until'] = '💰 Saldo ≤ R$ ' . number_format($data['balance_until'], 2, ',', '.');
                        }
                        return $indicators;
                    }),
            ], layout: Tables\Enums\FiltersLayout::AboveContent)
            ->filtersFormColumns(3)
            ->actions([
                Tables\Actions\ActionGroup::make([
                    Tables\Actions\Action::make('details')
                        ->label('📊 Analytics')
                        ->icon('heroicon-o-chart-bar-square')
                        ->color('info')
                        ->url(fn(User $record) => route('filament.admin.resources.users.detail', ['record' => $record])),
                        
                    Tables\Actions\ViewAction::make()
                        ->label('👁️ Visualizar')
                        ->icon('heroicon-m-eye')
                        ->color('gray'),
                        
                    Tables\Actions\EditAction::make()
                        ->label('✏️ Editar')
                        ->icon('heroicon-m-pencil-square')
                        ->color('warning'),
                        
                    Tables\Actions\Action::make('change_password')
                        ->label('🔐 Alterar Senha')
                        ->icon('heroicon-m-key')
                        ->color('primary')
                        ->url(fn(User $record) => static::getUrl('password.change', ['record' => $record])),
                        
                    Tables\Actions\Action::make('toggle_status')
                        ->label(fn (User $record): string => $record->status ? '❌ Desativar' : '✅ Ativar')
                        ->icon(fn (User $record): string => $record->status ? 'heroicon-m-x-circle' : 'heroicon-m-check-circle')
                        ->color(fn (User $record): string => $record->status ? 'danger' : 'success')
                        ->requiresConfirmation()
                        ->action(fn (User $record) => $record->update(['status' => !$record->status])),
                        
                    Tables\Actions\DeleteAction::make()
                        ->label('🗑️ Excluir')
                        ->icon('heroicon-m-trash')
                        ->color('danger'),
                ])
                ->label('⚙️ Ações')
                ->icon('heroicon-m-ellipsis-vertical')
                ->size('sm')
                ->color('gray')
                ->button(),
            ])
            ->actionsPosition(Tables\Enums\ActionsPosition::BeforeColumns)
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make()
                        ->icon('heroicon-m-trash')
                        ->color('danger'),
                        
                    Tables\Actions\BulkAction::make('activate_users')
                        ->label('✅ Ativar Usuários')
                        ->icon('heroicon-m-check-circle')
                        ->color('success')
                        ->requiresConfirmation()
                        ->modalHeading('Ativar Usuários Selecionados')
                        ->modalDescription('Tem certeza que deseja ativar todos os usuários selecionados?')
                        ->action(function($records) {
                            $records->each->update(['status' => 1]);
                        }),
                        
                    Tables\Actions\BulkAction::make('deactivate_users')
                        ->label('❌ Desativar Usuários')
                        ->icon('heroicon-m-x-circle')
                        ->color('danger')
                        ->requiresConfirmation()
                        ->modalHeading('Desativar Usuários Selecionados')
                        ->modalDescription('Os usuários selecionados não poderão mais acessar a plataforma.')
                        ->action(function($records) {
                            $records->each->update(['status' => 0]);
                        }),
                        
                    Tables\Actions\BulkAction::make('ban_users')
                        ->label('🚫 Banir Usuários')
                        ->icon('heroicon-m-no-symbol')
                        ->color('danger')
                        ->requiresConfirmation()
                        ->modalHeading('🚫 Banir Usuários Selecionados')
                        ->modalDescription('⚠️ ATENÇÃO: Esta ação irá banir permanentemente os usuários selecionados!')
                        ->modalSubmitActionLabel('Sim, banir usuários')
                        ->action(function($records) {
                            $records->each->update(['banned' => 1, 'status' => 0]);
                        }),
                ]),
            ])
            ->emptyStateActions([
                Tables\Actions\CreateAction::make()
                    ->label('👤 Criar Primeiro Usuário')
                    ->icon('heroicon-m-plus')
                    ->color('primary'),
            ])
            ->emptyStateHeading('👥 Nenhum usuário encontrado')
            ->emptyStateDescription('Comece criando o primeiro usuário da plataforma. Configure dados pessoais, afiliações e permissões!')
            ->emptyStateIcon('heroicon-o-users')
            ->striped()
            ->paginated([10, 25, 50, 100])
            ->defaultPaginationPageOption(25)
            ->searchOnBlur()
            ->deferLoading();
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    /**
     * @return string[]
     */
    public static function getWidgets(): array
    {
        return [
            UserOverview::class,
        ];
    }

    /**
     * @return array|\Filament\Resources\Pages\PageRegistration[]
     */
    public static function getPages(): array
    {
        return [
            'index' => \App\Filament\Admin\Resources\UserResource\Pages\ListUsers::route('/'),
            'create' => \App\Filament\Admin\Resources\UserResource\Pages\CreateUser::route('/create'),
            'edit' => \App\Filament\Admin\Resources\UserResource\Pages\EditUser::route('/{record}/edit'),
            'view' => \App\Filament\Admin\Resources\UserResource\Pages\ViewUser::route('/{record}/view'),
            'detail' => \App\Filament\Admin\Resources\UserResource\Pages\DetailUser::route('/{record}/detail'),
            'password.change' => \App\Filament\Admin\Resources\UserResource\Pages\ChangePasswordUser::route('/{record}/password/change'),
        ];
    }
}
